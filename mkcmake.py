#!/usr/bin/env python3

from collections import defaultdict
import os
import re
import sys


def main():
    name = None
    srcdirs = ['.']
    apps = []
    state = 'normal'
    mapping = defaultdict(list)
    previous_token = ''

    for line in open('Recipe').readlines():
        line = line.strip()
        if line.startswith('#') or not line:
            continue
        if 'block' == state:
            if '!end' == line:
                state = 'normal'
            continue
        if line.startswith('!'):
            parts = line.split(' ')
            if '!name' == parts[0]:
                assert 2 == len(parts)
                name = parts[1]
            elif '!makefile' == parts[0] or '!cflags' == parts[0]:
                pass  # ignored
            elif '!srcdir' == parts[0]:
                assert 2 == len(parts)
                srcdirs += [parts[1]]
            elif '!begin' == parts[0]:
                state = 'block'
            else:
                raise Exception("unknown token {}".format(parts[0]))
            continue

        parts = re.split(r"\s+", line)
        token = parts.pop(0)
        if '+' == token:
            token = previous_token
        else:
            op = parts.pop(0)
            if ':' == op:
                token += parts.pop(0)
                apps += [token]
            else:
                assert '=' == op
        assert parts
        mapping[token].extend(parts)
        previous_token = token

    # print(name)
    # print(srcdirs)
    # print(mapping)

    print("""\
# generated by mkcmake.py

# verbatim section:
cmake_minimum_required (VERSION 3.4)
project ({})

if (UNIX)
find_package (PkgConfig REQUIRED)
pkg_check_modules (GTK3 REQUIRED gtk+-3.0)

find_package (X11 REQUIRED)

include_directories (${{GTK3_INCLUDE_DIRS}} ${{X11_INCLUDE_DIR}})
link_directories (${{GTK3_LIBRARY_DIRS}})
add_definitions (${{GTK3_CFLAGS_OTHER}})
endif (UNIX)

# generated from Recipe:
""".format(name))

    print('include_directories ({})'.format(' '.join(
        sorted('${PROJECT_SOURCE_DIR}/' + os.path.normpath(src)
               for src in srcdirs))))

    for app in sorted(apps):
        name, platform = app.split('[')
        platform = platform[:-1]
        if 'T' in platform:
            continue
        if platform in ['G', 'C']:
            print('if (WIN32)')
        elif platform in ['X', 'U']:
            print('if (UNIX)')
        else:
            raise Exception('bad platform: ' + platform)

        files = sorted(to_path(srcdirs, expand(mapping, mapping[app])))
        print('add_executable({} {})'.format(name, ' '.join(files)))

        if platform in ['G', 'C']:
            print('endif (WIN32)')
        elif platform in ['X', 'U']:
            print('target_link_libraries ({} -ldl)'.format(name))
            if 'X' == platform:
                print('target_link_libraries ({} '.format(name) +
                      '${GTK3_LIBRARIES} ${X11_LIBRARIES})')
            print('endif (UNIX)')


def expand(map, list):
    for item in list:
        if item in map:
            yield from expand(map, map[item])
        else:
            yield item


def to_path(dirs, items):
    for item in items:
        if '.' in item:
            sys.stderr.write('ignoring path {}\n'.format(item))
        else:
            yield find_file(dirs, item)


def find_file(dirs, item):
    for dir in dirs:
        for ext in ['c', 'cpp']:
            cand = '{}/{}.{}'.format(dir, item, ext)
            if os.path.isfile(cand):
                return os.path.normpath(cand)

    raise Exception('no file named {}.[c|cpp] found in {}'
                    .format(item, dirs))


if '__main__' == __name__:
    main()
