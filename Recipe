# -*- makefile -*-
# 
# This file describes which PuTTY programs are made up from which
# object and resource files. It is processed into the various
# Makefiles by means of a Perl script. Makefile changes should
# really be made by editing this file and/or the Perl script, not
# by editing the actual Makefiles.

# ------------------------------------------------------------
# Top-level configuration.

# Overall project name.
!name putty
# Locations and types of output Makefiles.
!makefile vc windows/Makefile.vc
!makefile vcproj windows/MSVC
!makefile cygwin windows/Makefile.cyg
!makefile borland windows/Makefile.bor
!makefile lcc windows/Makefile.lcc
!makefile gtk unix/Makefile.gtk
!makefile unix unix/Makefile.ux
!makefile ac unix/Makefile.in
!makefile osx macosx/Makefile
!makefile devcppproj windows/DEVCPP
# Source directories.
!srcdir charset/
!srcdir windows/
!srcdir unix/
!srcdir macosx/

# Help text added to the top of each Makefile, with /D converted
# into -D as appropriate for the particular Makefile.

!begin help
#
# Extra options you can set:
#
#  - VER="/DSNAPSHOT=1999-01-25 /DSVN_REV=1234"
#      Generates executables whose About box report them as being a
#      development snapshot. SVN_REV is a Subversion revision number.
#
#  - VER=/DRELEASE=0.43
#      Generates executables whose About box report them as being a
#      release version.
#
#  - COMPAT=/DAUTO_WINSOCK (Windows only)
#      Causes PuTTY to assume that <windows.h> includes its own WinSock
#      header file, so that it won't try to include <winsock.h>.
#
#  - COMPAT=/DWINSOCK_TWO (Windows only)
#      Causes the PuTTY utilities to include <winsock2.h> instead of
#      <winsock.h>, except Plink which _needs_ WinSock 2 so it already
#      does this.
#
#  - COMPAT=/DNO_SECURITY (Windows only)
#      Disables Pageant's use of <aclapi.h>, which is not available
#      with some development environments (such as older versions of
#      the Cygwin/mingw GNU toolchain). This means that Pageant
#      won't care about the local user ID of processes accessing it; a
#      version of Pageant built with this option will therefore refuse
#      to run under NT-series OSes on security grounds (although it
#      will run fine on Win95-series OSes where there is no access
#      control anyway).
#
#  - COMPAT=/DNO_MULTIMON (Windows only)
#      Disables PuTTY's use of <multimon.h>, which is not available
#      with some development environments. This means that PuTTY's
#      full-screen mode (configurable to work on Alt-Enter) will
#      not behave usefully in a multi-monitor environment.
#
#      Note that this definition is always enabled in the Cygwin
#      build, since at the time of writing this <multimon.h> is
#      known not to be available in Cygwin.
#
#  - COMPAT=/DNO_HTMLHELP (Windows only)
#      Disables PuTTY's use of <htmlhelp.h>, which is not available
#      with some development environments. The resulting binary
#      will only look for an old-style WinHelp file (.HLP/.CNT), and
#      will ignore any .CHM file.
#
#      Note that this definition is always enabled in the Cygwin
#      build, since at the time of writing this <htmlhelp.h> is
#      known not to be available in Cygwin (although you can use
#      the htmlhelp.h supplied with HTML Help Workshop).
#
#  - RCFL=/DNO_MANIFESTS (Windows only)
#      Disables inclusion of XML application manifests in the PuTTY
#      binaries. This may be necessary to build for 64-bit Windows;
#      the manifests are only included to use the XP GUI style on
#      Windows XP, and the architecture tags are a lie on 64-bit.
#
#  - COMPAT=/DNO_IPV6
#      Disables PuTTY's ability to make IPv6 connections, enabling
#      it to compile under development environments which do not
#      support IPv6 in their header files.
#
#  - COMPAT=/DNO_GSSAPI
#      Disables PuTTY's ability to use GSSAPI functions for
#      authentication and key exchange.
#
#  - COMPAT=/DSTATIC_GSSAPI
#      Causes PuTTY to try to link statically against the GSSAPI
#      library instead of the default of doing it at run time.
#
#  - COMPAT=/DMSVC4 (Windows only)
#  - RCFL=/DMSVC4
#      Makes a couple of minor changes so that PuTTY compiles using
#      MSVC 4. You will also need /DNO_SECURITY and /DNO_MULTIMON.
#
#  - RCFL=/DASCIICTLS (Windows only)
#      Uses ASCII rather than Unicode to specify the tab control in
#      the resource file. Probably most useful when compiling with
#      Cygnus/mingw32, whose resource compiler may have less of a
#      problem with it.
#
#  - XFLAGS=/DTELNET_DEFAULT
#      Causes PuTTY to default to the Telnet protocol (in the absence
#      of Default Settings and so on to the contrary). Normally PuTTY
#      will default to SSH.
#
#  - XFLAGS=/DDEBUG
#      Causes PuTTY to enable internal debugging.
#
#  - XFLAGS=/DMALLOC_LOG
#      Causes PuTTY to emit a file called putty_mem.log, logging every
#      memory allocation and free, so you can track memory leaks.
#
#  - XFLAGS=/DMINEFIELD (Windows only)
#      Causes PuTTY to use a custom memory allocator, similar in
#      concept to Electric Fence, in place of regular malloc(). Wastes
#      huge amounts of RAM, but should cause heap-corruption bugs to
#      show up as GPFs at the point of failure rather than appearing
#      later on as second-level damage.
#
!end

# ------------------------------------------------------------
# Additional text added verbatim to each individual Makefile.

# Hack to force version.o to be rebuilt always.
!begin vc
version.obj: *.c *.h *.rc
	cl $(VER) $(CFLAGS) /c ..\version.c
!end
!specialobj vc version
!begin cygwin
version.o: FORCE
	$(CC) $(COMPAT) $(XFLAGS) $(CFLAGS) $(VER) -c ../version.c
!end
!specialobj cygwin version
!begin borland
version.obj: FORCE
	bcc32 $(VER) $(CFLAGS) /c ..\version.c
!end
!specialobj borland version
!begin lcc
version.obj: FORCE
	lcc $(VER) $(CFLAGS) /c ..\version.c
!end
!specialobj lcc version
# For Unix, we also need the gross MD5 hack that causes automatic
# version number selection in release source archives.
!begin gtk
version.o: FORCE
	if test -z "$(VER)" && (cd ..; md5sum -c manifest); then \
		$(CC) $(COMPAT) $(XFLAGS) $(CFLAGS) `cat ../version.def` -c ../version.c; \
	else \
		$(CC) $(COMPAT) $(XFLAGS) $(CFLAGS) $(VER) -c ../version.c; \
	fi
!end
!specialobj gtk version

# Add VER to Windows resource targets, and force them to be rebuilt every
# time, on the assumption that they will contain version information.
!begin vc vars
CFLAGS = $(CFLAGS) /DHAS_GSSAPI /DSECURITY_WIN32
RCFLAGS = $(RCFLAGS) $(VER)
!end
!begin cygwin vars
# XXX GNU-ism, but it's probably all right for a Cygwin/MinGW Makefile.
RCFLAGS += $(patsubst -D%,--define %,$(VER))
!end
!begin borland vars
# Borland doesn't support +=. This probably shouldn't work, but seems to.
RCFLAGS = $(RCFLAGS) $(VER)
!end
!begin lcc vars
RCFLAGS += $(VER)
!end
!forceobj putty.res
!forceobj puttytel.res
!forceobj plink.res
!forceobj pscp.res
!forceobj psftp.res
!forceobj pageant.res
!forceobj puttygen.res

# `make install' target for Unix.
!begin gtk
install:
	mkdir -p $(DESTDIR)$(bindir) $(DESTDIR)$(man1dir)
	$(INSTALL_PROGRAM) -m 755 plink $(DESTDIR)$(bindir)/plink
	$(INSTALL_PROGRAM) -m 755 pscp $(DESTDIR)$(bindir)/pscp
	$(INSTALL_PROGRAM) -m 755 psftp $(DESTDIR)$(bindir)/psftp
	$(INSTALL_PROGRAM) -m 755 pterm $(DESTDIR)$(bindir)/pterm
	if test -n "$(UTMP_GROUP)"; then \
	  chgrp $(UTMP_GROUP) $(DESTDIR)$(bindir)/pterm && \
	    chmod 2755 $(DESTDIR)$(bindir)/pterm; \
	elif test -n "$(UTMP_USER)"; then \
	  chown $(UTMP_USER) $(DESTDIR)$(bindir)/pterm && \
	    chmod 4755 $(DESTDIR)$(bindir)/pterm; \
	fi
	$(INSTALL_PROGRAM) -m 755 putty $(DESTDIR)$(bindir)/putty
	$(INSTALL_PROGRAM) -m 755 puttygen $(DESTDIR)$(bindir)/puttygen
	$(INSTALL_PROGRAM) -m 755 puttytel $(DESTDIR)$(bindir)/puttytel
	$(INSTALL_DATA) -m 644 ../doc/plink.1 $(DESTDIR)$(man1dir)/plink.1
	$(INSTALL_DATA) -m 644 ../doc/pscp.1 $(DESTDIR)$(man1dir)/pscp.1
	$(INSTALL_DATA) -m 644 ../doc/psftp.1 $(DESTDIR)$(man1dir)/psftp.1
	$(INSTALL_DATA) -m 644 ../doc/pterm.1 $(DESTDIR)$(man1dir)/pterm.1
	$(INSTALL_DATA) -m 644 ../doc/putty.1 $(DESTDIR)$(man1dir)/putty.1
	$(INSTALL_DATA) -m 644 ../doc/puttygen.1 $(DESTDIR)$(man1dir)/puttygen.1
	$(INSTALL_DATA) -m 644 ../doc/puttytel.1 $(DESTDIR)$(man1dir)/puttytel.1

install-strip:
	$(MAKE) install INSTALL_PROGRAM="$(INSTALL_PROGRAM) -s"
!end
!begin osx vars
CFLAGS += -DMACOSX
!end

# Random symbols.
!begin cygwin vars
# _WIN32_IE is required to expose identifiers that only make sense on
# systems with IE5+ installed, such as some arguments to SHGetFolderPath().
# WINVER etc perform a similar function for FlashWindowEx().
CFLAGS += -D_WIN32_IE=0x0500
CFLAGS += -DWINVER=0x0500 -D_WIN32_WINDOWS=0x0410 -D_WIN32_WINNT=0x0500
!end

# ------------------------------------------------------------
# Definitions of object groups. A group name, followed by an =,
# followed by any number of objects or other already-defined group
# names. A line beginning `+' is assumed to continue the previous
# line.

# Terminal emulator and its (platform-independent) dependencies.
TERMINAL = terminal wcwidth ldiscucs logging tree234 minibidi
         + config dialog

# GUI front end and terminal emulator (putty, puttytel).
GUITERM  = TERMINAL window windlg winctrls sizetip winucs winprint
         + winutils wincfg sercfg winhelp winjump

# Same thing on Unix.
UXTERM   = TERMINAL uxcfg sercfg uxucs uxprint timing
GTKTERM  = UXTERM gtkwin gtkcfg gtkdlg gtkfont gtkcols xkeysym
OSXTERM  = UXTERM osxwin osxdlg osxctrls

# Non-SSH back ends (putty, puttytel, plink).
NONSSH   = telnet raw rlogin ldisc pinger

# SSH back end (putty, plink, pscp, psftp).
SSH      = ssh sshcrc sshdes sshmd5 sshrsa sshrand sshsha sshblowf
         + sshdh sshcrcda sshpubk sshzlib sshdss x11fwd portfwd
         + sshaes sshsh256 sshsh512 sshbn wildcard pinger ssharcf
         + sshgssc pgssapi
WINSSH   = SSH winnoise winpgntc wingss
UXSSH    = SSH uxnoise uxagentc uxgss

# SFTP implementation (pscp, psftp).
SFTP     = sftp int64 logging

# Miscellaneous objects appearing in all the network utilities (not
# Pageant or PuTTYgen).
MISC     = timing misc version settings tree234 proxy
WINMISC  = MISC winstore winnet winhandl cmdline windefs winmisc winproxy
         + wintime
UXMISC   = MISC uxstore uxsel uxnet cmdline uxmisc uxproxy time
OSXMISC  = MISC uxstore uxsel osxsel uxnet uxmisc uxproxy time

# Character set library, for use in pterm.
CHARSET  = sbcsdat slookup sbcs utf8 toucs fromucs xenc mimeenc macenc localenc

# Standard libraries.
LIBS     = advapi32.lib user32.lib gdi32.lib comctl32.lib comdlg32.lib
         + shell32.lib winmm.lib imm32.lib winspool.lib ole32.lib

# Network backend sets. This also brings in the relevant attachment
# to proxy.c depending on whether we're crypto-avoidant or not.
BE_ALL   = be_all cproxy
BE_NOSSH = be_nossh nocproxy
BE_SSH   = be_none cproxy
BE_NONE  = be_none nocproxy
# More backend sets, with the additional Windows serial-port module.
W_BE_ALL = be_all_s winser cproxy
W_BE_NOSSH = be_nos_s winser nocproxy
# And with the Unix serial-port module.
U_BE_ALL = be_all_s uxser cproxy
U_BE_NOSSH = be_nos_s uxser nocproxy

# ------------------------------------------------------------
# Definitions of actual programs. The program name, followed by a
# colon, followed by a list of objects. Also in the list may be the
# keywords [G] for Windows GUI app, [C] for Console app, [X] for
# X/GTK Unix app, [U] for command-line Unix app.

putty    : [G] GUITERM NONSSH WINSSH W_BE_ALL WINMISC winx11 putty.res LIBS
puttytel : [G] GUITERM NONSSH W_BE_NOSSH WINMISC puttytel.res nogss LIBS
plink    : [C] winplink wincons NONSSH WINSSH W_BE_ALL logging WINMISC
         + winx11 plink.res winnojmp LIBS
pscp     : [C] pscp winsftp wincons WINSSH BE_SSH SFTP wildcard WINMISC
         + pscp.res winnojmp LIBS
psftp    : [C] psftp winsftp wincons WINSSH BE_SSH SFTP wildcard WINMISC
         + psftp.res winnojmp LIBS

pageant  : [G] winpgnt sshrsa sshpubk sshdes sshbn sshmd5 version tree234
         + misc sshaes sshsha winpgntc sshdss sshsh256 sshsh512 winutils
         + winmisc winhelp pageant.res LIBS

puttygen : [G] winpgen sshrsag sshdssg sshprime sshdes sshbn sshmd5 version
         + sshrand winnoise sshsha winstore misc winctrls sshrsa sshdss winmisc
         + sshpubk sshaes sshsh256 sshsh512 import winutils puttygen.res
	 + tree234 notiming winhelp winnojmp LIBS wintime

pterm    : [X] GTKTERM uxmisc misc ldisc settings uxpty uxsel BE_NONE uxstore
         + uxsignal CHARSET cmdline uxpterm version time xpmpterm xpmptcfg
	 + nogss
putty    : [X] GTKTERM uxmisc misc ldisc settings uxsel U_BE_ALL uxstore
         + uxsignal CHARSET uxputty NONSSH UXSSH UXMISC ux_x11 xpmputty
         + xpmpucfg
puttytel : [X] GTKTERM uxmisc misc ldisc settings uxsel U_BE_NOSSH
	 + uxstore uxsignal CHARSET uxputty NONSSH UXMISC xpmputty xpmpucfg
	 + nogss

plink    : [U] uxplink uxcons NONSSH UXSSH U_BE_ALL logging UXMISC uxsignal
         + ux_x11

puttygen : [U] cmdgen sshrsag sshdssg sshprime sshdes sshbn sshmd5 version
         + sshrand uxnoise sshsha misc sshrsa sshdss uxcons uxstore uxmisc
         + sshpubk sshaes sshsh256 sshsh512 import puttygen.res time tree234
	 + uxgen notiming

pscp     : [U] pscp uxsftp uxcons UXSSH BE_SSH SFTP wildcard UXMISC
psftp    : [U] psftp uxsftp uxcons UXSSH BE_SSH SFTP wildcard UXMISC

PuTTY    : [MX] osxmain OSXTERM OSXMISC CHARSET U_BE_ALL NONSSH UXSSH
         + ux_x11 uxpty uxsignal testback putty.icns info.plist
