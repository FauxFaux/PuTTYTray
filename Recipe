# -*- makefile -*-
# 
# This file describes which PuTTY programs are made up from which
# object and resource files. It is processed into the various
# Makefiles by means of a Perl script. Makefile changes should
# really be made by editing this file and/or the Perl script, not
# by editing the actual Makefiles.

# ------------------------------------------------------------
# Top-level configuration.

# Overall project name.
!name putty
# Locations and types of output Makefiles.
!makefile vc windows/Makefile.vc
!makefile vcproj windows/MSVC
!makefile cygwin windows/Makefile.cyg
!makefile borland windows/Makefile.bor
!makefile lcc windows/Makefile.lcc
!makefile gtk unix/Makefile.gtk
!makefile mpw mac/Makefile.mpw
!makefile osx macosx/Makefile
# Source directories.
!srcdir charset/
!srcdir windows/
!srcdir unix/
!srcdir mac/
!srcdir macosx/

# Help text added to the top of each Makefile, with /D converted
# into -D as appropriate for the particular Makefile.

!begin help
#
# Extra options you can set:
#
#  - VER=/DSNAPSHOT=1999-01-25
#      Generates executables whose About box report them as being a
#      development snapshot.
#
#  - VER=/DRELEASE=0.43
#      Generates executables whose About box report them as being a
#      release version.
#
#  - COMPAT=/DAUTO_WINSOCK
#      Causes PuTTY to assume that <windows.h> includes its own WinSock
#      header file, so that it won't try to include <winsock.h>.
#
#  - COMPAT=/DWINSOCK_TWO
#      Causes the PuTTY utilities to include <winsock2.h> instead of
#      <winsock.h>, except Plink which _needs_ WinSock 2 so it already
#      does this.
#
#  - COMPAT=/DNO_SECURITY
#      Disables Pageant's use of <aclapi.h>, which is not available
#      with some development environments (such as older versions of
#      the Cygwin/mingw GNU toolchain). This means that Pageant
#      won't care about the local user ID of processes accessing it; a
#      version of Pageant built with this option will therefore refuse
#      to run under NT-series OSes on security grounds (although it
#      will run fine on Win95-series OSes where there is no access
#      control anyway).
#
#  - COMPAT=/DNO_MULTIMON
#      Disables PuTTY's use of <multimon.h>, which is not available
#      with some development environments. This means that PuTTY's
#      full-screen mode (configurable to work on Alt-Enter) will
#      not behave usefully in a multi-monitor environment.
#
#      Note that this definition is always enabled in the Cygwin
#      build, since at the time of writing this <multimon.h> is
#      known not to be available in Cygwin.
#
#  - COMPAT=/DNO_IPV6
#      Disables PuTTY's ability to make IPv6 connections, enabling
#      it to compile under development environments which do not
#      support IPv6 in their header files.
#
#  - COMPAT=/DMSVC4
#  - RCFL=/DMSVC4
#      Makes a couple of minor changes so that PuTTY compiles using
#      MSVC 4. You will also need /DNO_SECURITY and /DNO_MULTIMON.
#
#  - RCFL=/DASCIICTLS
#      Uses ASCII rather than Unicode to specify the tab control in
#      the resource file. Probably most useful when compiling with
#      Cygnus/mingw32, whose resource compiler may have less of a
#      problem with it.
#
#  - XFLAGS=/DTELNET_DEFAULT
#      Causes PuTTY to default to the Telnet protocol (in the absence
#      of Default Settings and so on to the contrary). Normally PuTTY
#      will default to SSH.
#
#  - XFLAGS=/DDEBUG
#      Causes PuTTY to enable internal debugging.
#
#  - XFLAGS=/DMALLOC_LOG
#      Causes PuTTY to emit a file called putty_mem.log, logging every
#      memory allocation and free, so you can track memory leaks.
#
#  - XFLAGS=/DMINEFIELD
#      Causes PuTTY to use a custom memory allocator, similar in
#      concept to Electric Fence, in place of regular malloc(). Wastes
#      huge amounts of RAM, but should cause heap-corruption bugs to
#      show up as GPFs at the point of failure rather than appearing
#      later on as second-level damage.
#
!end

# ------------------------------------------------------------
# Additional text added verbatim to each individual Makefile.

# Hack to force version.o to be rebuilt always.
!begin vc
version.obj: *.c *.h *.rc
	cl $(VER) $(CFLAGS) /c ..\version.c
!end
!specialobj vc version
!begin cygwin
version.o: FORCE
FORCE:
	$(CC) $(COMPAT) $(XFLAGS) $(CFLAGS) $(VER) -c ../version.c
!end
!specialobj cygwin version
!begin borland
version.obj: FORCE
FORCE:
	bcc32 $(VER) $(CFLAGS) /c ..\version.c
!end
!specialobj borland version
!begin lcc
version.obj: FORCE
FORCE:
	lcc $(VER) $(CFLAGS) /c ..\version.c
!end
!specialobj lcc version
# For Unix, we also need the gross MD5 hack that causes automatic
# version number selection in release source archives.
!begin gtk
version.o: FORCE;
FORCE:
	if test -z "$(VER)" && (cd ..; md5sum -c manifest); then \
		$(CC) $(COMPAT) $(XFLAGS) $(CFLAGS) `cat ../version.def` -c ../version.c; \
	else \
		$(CC) $(COMPAT) $(XFLAGS) $(CFLAGS) $(VER) -c ../version.c; \
	fi
!end
!specialobj gtk version

# `make install' target for Unix.
!begin gtk
install:
	$(INSTALL_PROGRAM) -m 755 plink $(DESTDIR)$(bindir)/plink
	$(INSTALL_PROGRAM) -m 755 pscp $(DESTDIR)$(bindir)/pscp
	$(INSTALL_PROGRAM) -m 755 psftp $(DESTDIR)$(bindir)/psftp
	$(INSTALL_PROGRAM) -m 755 pterm $(DESTDIR)$(bindir)/pterm
	if test -n "$(UTMP_GROUP)"; then \
	  chgrp $(UTMP_GROUP) $(DESTDIR)$(bindir)/pterm && \
	    chmod 2755 $(DESTDIR)$(bindir)/pterm; \
	elif test -n "$(UTMP_USER)"; then \
	  chown $(UTMP_USER) $(DESTDIR)$(bindir)/pterm && \
	    chmod 4755 $(DESTDIR)$(bindir)/pterm; \
	fi
	$(INSTALL_PROGRAM) -m 755 putty $(DESTDIR)$(bindir)/putty
	$(INSTALL_PROGRAM) -m 755 puttygen $(DESTDIR)$(bindir)/puttygen
	$(INSTALL_PROGRAM) -m 755 puttytel $(DESTDIR)$(bindir)/puttytel
	$(INSTALL_DATA) -m 644 ../doc/plink.1 $(DESTDIR)$(man1dir)/plink.1
	$(INSTALL_DATA) -m 644 ../doc/pscp.1 $(DESTDIR)$(man1dir)/pscp.1
	$(INSTALL_DATA) -m 644 ../doc/psftp.1 $(DESTDIR)$(man1dir)/psftp.1
	$(INSTALL_DATA) -m 644 ../doc/pterm.1 $(DESTDIR)$(man1dir)/pterm.1
	$(INSTALL_DATA) -m 644 ../doc/putty.1 $(DESTDIR)$(man1dir)/putty.1
	$(INSTALL_DATA) -m 644 ../doc/puttygen.1 $(DESTDIR)$(man1dir)/puttygen.1
	$(INSTALL_DATA) -m 644 ../doc/puttytel.1 $(DESTDIR)$(man1dir)/puttytel.1

install-strip:
	$(MAKE) install INSTALL_PROGRAM="$(INSTALL_PROGRAM) -s"
!end
!begin osx vars
CFLAGS += -DMACOSX
!end

# ------------------------------------------------------------
# Definitions of object groups. A group name, followed by an =,
# followed by any number of objects or other already-defined group
# names. A line beginning `+' is assumed to continue the previous
# line.

# Terminal emulator and its (platform-independent) dependencies.
TERMINAL = terminal wcwidth ldiscucs logging tree234 minibidi
         + config dialog

# GUI front end and terminal emulator (putty, puttytel).
GUITERM  = TERMINAL window windlg winctrls sizetip winucs winprint
         + winutils wincfg

# Same thing on Unix.
UXTERM   = TERMINAL uxcfg uxucs uxprint timing
GTKTERM  = UXTERM gtkwin gtkcfg gtkdlg gtkcols gtkpanel xkeysym
OSXTERM  = UXTERM osxwin osxdlg osxctrls

# Non-SSH back ends (putty, puttytel, plink).
NONSSH   = telnet raw rlogin ldisc pinger

# SSH back end (putty, plink, pscp, psftp).
SSH      = ssh sshcrc sshdes sshmd5 sshrsa sshrand sshsha sshblowf
         + sshdh sshcrcda sshpubk sshzlib sshdss x11fwd portfwd
         + sshaes sshsh512 sshbn wildcard pinger
WINSSH   = SSH winnoise winpgntc
UXSSH    = SSH uxnoise uxagentc
MACSSH   = SSH macnoise

# SFTP implementation (pscp, psftp).
SFTP     = sftp int64 logging

# Miscellaneous objects appearing in all the network utilities (not
# Pageant or PuTTYgen).
MISC     = timing misc version settings tree234 proxy
WINMISC  = MISC winstore winnet cmdline windefs winmisc pproxy wintime
UXMISC   = MISC uxstore uxsel uxnet cmdline uxmisc uxproxy time
OSXMISC  = MISC uxstore uxsel osxsel uxnet uxmisc uxproxy time
MACMISC  = MISC macstore macnet mtcpnet otnet macmisc macabout pproxy

# Character set library, for use in pterm.
CHARSET  = sbcsdat slookup sbcs utf8 toucs fromucs xenc mimeenc macenc localenc

# Standard libraries.
LIBS     = advapi32.lib user32.lib gdi32.lib comctl32.lib comdlg32.lib
         + shell32.lib winmm.lib imm32.lib winspool.lib

# Network backend sets. This also brings in the relevant attachment
# to proxy.c depending on whether we're crypto-avoidant or not.
BE_ALL   = be_all cproxy
BE_NOSSH = be_nossh nocproxy
BE_SSH   = be_none cproxy
BE_NONE  = be_none nocproxy

# ------------------------------------------------------------
# Definitions of actual programs. The program name, followed by a
# colon, followed by a list of objects. Also in the list may be the
# keywords [G] for Windows GUI app, [C] for Console app, [X] for
# X/GTK Unix app, [U] for command-line Unix app, [M] for Macintosh app.

putty    : [G] GUITERM NONSSH WINSSH BE_ALL WINMISC win_res.res LIBS
puttytel : [G] GUITERM NONSSH BE_NOSSH WINMISC win_res.res LIBS
plink    : [C] winplink wincons NONSSH WINSSH BE_ALL logging WINMISC
         + plink.res LIBS
pscp     : [C] pscp winsftp wincons WINSSH BE_SSH SFTP wildcard WINMISC
         + pscp.res LIBS
psftp    : [C] psftp winsftp wincons WINSSH BE_SSH SFTP wildcard WINMISC
         + pscp.res LIBS

pageant  : [G] winpgnt sshrsa sshpubk sshdes sshbn sshmd5 version tree234
         + misc sshaes sshsha winpgntc sshdss sshsh512 winutils winmisc
         + pageant.res LIBS

puttygen : [G] winpgen sshrsag sshdssg sshprime sshdes sshbn sshmd5 version
         + sshrand winnoise sshsha winstore misc winctrls sshrsa sshdss winmisc
         + sshpubk sshaes sshsh512 import winutils puttygen.res tree234
	 + notiming LIBS wintime

pterm    : [X] GTKTERM uxmisc misc ldisc settings uxpty uxsel BE_NONE uxstore
         + uxsignal CHARSET cmdline uxpterm version time
putty    : [X] GTKTERM uxmisc misc ldisc settings uxsel BE_ALL uxstore
         + uxsignal CHARSET uxputty NONSSH UXSSH UXMISC ux_x11
puttytel : [X] GTKTERM uxmisc misc ldisc settings uxsel BE_NOSSH
	 + uxstore uxsignal CHARSET uxputty NONSSH UXMISC

plink    : [U] uxplink uxcons NONSSH UXSSH BE_ALL logging UXMISC uxsignal ux_x11

puttygen : [U] cmdgen sshrsag sshdssg sshprime sshdes sshbn sshmd5 version
         + sshrand uxnoise sshsha misc sshrsa sshdss uxcons uxstore uxmisc
         + sshpubk sshaes sshsh512 import puttygen.res time tree234 uxgen
         + notiming

pscp     : [U] pscp uxsftp uxcons UXSSH BE_SSH SFTP wildcard UXMISC
psftp    : [U] psftp uxsftp uxcons UXSSH BE_SSH SFTP wildcard UXMISC

PuTTY    : [M] terminal wcwidth ldiscucs logging BE_ALL mac macdlg macevlog
         + macterm macucs mac_res.rsrc testback NONSSH MACSSH MACMISC CHARSET
         + stricmp vsnprint dialog config macctrls minibidi
PuTTYtel : [M] terminal wcwidth ldiscucs logging BE_NOSSH mac macdlg
	 + macevlog macterm macucs mac_res.rsrc testback NONSSH MACMISC
	 + CHARSET stricmp vsnprint dialog config macctrls minibidi
PuTTYgen : [M] macpgen sshrsag sshdssg sshprime sshdes sshbn sshmd5 version
         + sshrand macnoise sshsha macstore misc sshrsa sshdss macmisc sshpubk
         + sshaes sshsh512 import macpgen.rsrc macpgkey macabout

PuTTY    : [MX] osxmain OSXTERM OSXMISC CHARSET BE_ALL NONSSH UXSSH
         + ux_x11 uxpty uxsignal testback putty.icns info.plist
