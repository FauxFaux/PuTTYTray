diff --git a/windows/winmisc.c b/windows/winmisc.c
index ba15bad6..203a5c5f 100644
--- a/windows/winmisc.c
+++ b/windows/winmisc.c
@@ -7,6 +7,14 @@
 #include "putty.h"
 #define SECURITY_WIN32
 #include <security.h>
+#include <shlobj.h>
+
+/*
+ * HACK: PuttyTray / Session Icon
+ * Otherwise it will not know IDI_MAINICON
+ */ 
+#include "win_res.h"
+//--------------------------
 
 OSVERSIONINFO osVersion;
 
@@ -536,3 +544,79 @@ FontSpec *fontspec_deserialise(void *vdata, int maxsize, int *used)
                         GET_32BIT_MSB_FIRST(end + 4),
                         GET_32BIT_MSB_FIRST(end + 8));
 }
+
+HICON extract_icon(const char *iconpath, int smallicon)
+{
+    char *iname, *comma;
+    int iindex;
+    HICON hiconLarge, hiconSmall;
+
+    hiconLarge = NULL;
+    hiconSmall = NULL;
+
+    if (iconpath && iconpath[0]) {
+	iname = dupstr(iconpath);
+	comma = strrchr(iname, ',');
+
+	if (comma) {
+	    *comma = '\0';
+	    comma++;
+	    iindex = atoi(comma);
+
+	    ExtractIconEx(iname, iindex, &hiconLarge, &hiconSmall, 1);
+	}
+	sfree(iname);
+    }
+
+    // Fix if no icon found
+    if (!hiconLarge && !smallicon) {
+        hiconLarge = LoadImage(hinst, MAKEINTRESOURCE(IDI_MAINICON), IMAGE_ICON,
+            GetSystemMetrics(SM_CXICON), GetSystemMetrics(SM_CYICON), LR_DEFAULTCOLOR|LR_SHARED);
+    }
+    if (!hiconSmall && smallicon) {
+        hiconSmall = LoadImage(hinst, MAKEINTRESOURCE(IDI_MAINICON), IMAGE_ICON,
+            GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), LR_DEFAULTCOLOR|LR_SHARED);
+    }
+
+    if (smallicon) {
+	return hiconSmall;
+    } else {
+	return hiconLarge;
+    }
+}
+
+Filename *get_id_rsa_path() {
+    CHAR path[MAX_PATH];
+    SHGetFolderPath(NULL, CSIDL_PROFILE, NULL, 0, path);
+    strcat(path, "\\.ssh\\id_rsa");
+    return filename_from_str(path);
+}
+
+int absolute_path(const char *path) {
+    return path[0] && path[1] == ':';
+}
+
+/* Naming Files, Paths, and Namespaces:
+ * http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247.aspx
+ */
+void sanitise_path_leaving_slashes(Filename *original, char *path) {
+    const char replacement = '_';
+    const size_t len = strlen(path);
+    size_t i;
+    for (i = absolute_path(filename_to_str(original)) ? 2 : 0; i < len; ++i) {
+        if (path[i] < 32) {
+            path[i] = replacement;
+            continue;
+        }
+        switch (path[i]) {
+        case '<':
+        case '>':
+        case ':':
+        case '|':
+        case '?':
+        case '*':
+            path[i] = replacement;
+            continue;
+        }
+    }
+}
