diff --git a/terminal.c b/terminal.c
index ae85eb58..80a792b4 100644
--- a/terminal.c
+++ b/terminal.c
@@ -12,6 +12,11 @@
 #include "putty.h"
 #include "terminal.h"
 
+/*
+ * HACK: PuttyTray / Nutty
+ */ 
+#include "urlhack.h"
+
 #define poslt(p1,p2) ( (p1).y < (p2).y || ( (p1).y == (p2).y && (p1).x < (p2).x ) )
 #define posle(p1,p2) ( (p1).y < (p2).y || ( (p1).y == (p2).y && (p1).x <= (p2).x ) )
 #define poseq(p1,p2) ( (p1).y == (p2).y && (p1).x == (p2).x )
@@ -1374,6 +1379,7 @@ static void set_erase_char(Terminal *term)
 void term_copy_stuff_from_conf(Terminal *term)
 {
     term->ansi_colour = conf_get_int(term->conf, CONF_ansi_colour);
+    term->pastedelay = conf_get_int(term->conf, CONF_pastedelay);
     term->arabicshaping = conf_get_int(term->conf, CONF_arabicshaping);
     term->beep = conf_get_int(term->conf, CONF_beep);
     term->bellovl = conf_get_int(term->conf, CONF_bellovl);
@@ -1641,6 +1647,11 @@ Terminal *term_init(Conf *myconf, struct unicode_data *ucsdata,
     term->bidi_cache_size = 0;
     term->pre_bidi_cache = term->post_bidi_cache = NULL;
 
+	/*
+	 * HACK: PuttyTray / Nutty
+	 */
+	term->url_update = TRUE;
+
     /* FULL-TERMCHAR */
     term->basic_erase_char.chr = CSET_ASCII | ' ';
     term->basic_erase_char.attr = ATTR_DEFAULT;
@@ -1913,6 +1924,7 @@ static int find_last_nonempty_line(Terminal * term, tree234 * screen)
     for (i = count234(screen) - 1; i >= 0; i--) {
 	termline *line = index234(screen, i);
 	int j;
+        assert(term->erase_char.cc_next == 0);
 	for (j = 0; j < line->cols; j++)
 	    if (!termchars_equal(&line->chars[j], &term->erase_char))
 		break;
@@ -2134,6 +2146,7 @@ static void scroll(Terminal *term, int topline, int botline, int lines, int sb)
 		    term->disptop--;
 	    }
             resizeline(term, line, term->cols);
+            assert(term->erase_char.cc_next == 0);
 	    for (i = 0; i < term->cols; i++)
 		copy_termchar(line, i, &term->erase_char);
 	    line->lattr = LATTR_NORM;
@@ -2426,6 +2439,7 @@ static void erase_lots(Terminal *term,
 		else
 		    ldata->lattr = LATTR_NORM;
 	    } else {
+                assert(term->erase_char.cc_next == 0);
 		copy_termchar(ldata, start.x, &term->erase_char);
 	    }
 	    if (incpos(start) && start.y < term->rows) {
@@ -2510,6 +2524,7 @@ static void insch(Terminal *term, int n)
 	    move_termchar(ldata,
 			  ldata->chars + term->curs.x + j + n,
 			  ldata->chars + term->curs.x + j);
+        assert(term->erase_char.cc_next == 0);
 	while (n--)
 	    copy_termchar(ldata, term->curs.x + n, &term->erase_char);
     }
@@ -2954,6 +2969,7 @@ static void term_out(Terminal *term)
 	    if (!term->no_dbackspace) {
 		check_boundary(term, term->curs.x, term->curs.y);
 		check_boundary(term, term->curs.x+1, term->curs.y);
+                assert(term->erase_char.cc_next == 0);
 		copy_termchar(scrlineptr(term->curs.y),
 			      term->curs.x, &term->erase_char);
 	    }
@@ -4930,6 +4946,49 @@ static void do_paint(Terminal *term, Context ctx, int may_optimise)
 #endif /* OPTIMISE_SCROLL */
     termchar *newline;
 
+	/*
+	 * HACK: PuttyTray / Nutty
+	 * Hyperlink stuff: Find visible hyperlinks
+	 *
+	 * TODO: We should find out somehow that the stuff on screen has changed since last
+	 *       paint. How to do it?
+	 */
+	int urlhack_underline_always = (conf_get_int(term->conf, CONF_url_underline) == URLHACK_UNDERLINE_ALWAYS);
+
+	int urlhack_underline =
+		conf_get_int(term->conf, CONF_url_underline) == URLHACK_UNDERLINE_ALWAYS ||
+		(conf_get_int(term->conf, CONF_url_underline) == URLHACK_UNDERLINE_HOVER && (!conf_get_int(term->conf, CONF_url_ctrl_click) || urlhack_is_ctrl_pressed())) ? 1 : 0;
+	int urlhack_is_link = 0, urlhack_hover_current = 0;
+	int urlhack_toggle_x = term->cols, urlhack_toggle_y = term->rows;
+	unsigned int urlhack_region_index = 0;
+	text_region urlhack_region;
+
+	if (term->url_update) {
+		urlhack_reset();
+
+		for (i = 0; i < term->rows; i++) {
+			termline *lp = lineptr(term->disptop + i);
+
+			for (j = 0; j < term->cols; j++) {
+				unsigned long tchar = lp->chars[j].chr;
+				urlhack_putchar(tchar & CHAR_MASK ? (char)(tchar & CHAR_MASK) : ' ');
+			}
+
+			unlineptr(lp);
+		}
+
+		urlhack_go_find_me_some_hyperlinks(term->cols);
+	}
+	urlhack_region = urlhack_get_link_region(urlhack_region_index);
+	urlhack_toggle_x = urlhack_region.x0;
+	urlhack_toggle_y = urlhack_region.y0;
+
+	if (urlhack_underline_always)
+		urlhack_hover_current = 1;
+	else
+		urlhack_hover_current = urlhack_is_in_this_link_region(urlhack_region, urlhack_mouse_old_x, urlhack_mouse_old_y);
+	/* HACK: PuttyTray / Nutty : END */
+
     chlen = 1024;
     ch = snewn(chlen, wchar_t);
 
@@ -5083,6 +5142,47 @@ static void do_paint(Terminal *term, Context ctx, int may_optimise)
 	    if (j < term->cols-1 && d[1].chr == UCSWIDE)
 		tattr |= ATTR_WIDE;
 
+		/*
+		 * HACK: PuttyTray / Nutty
+		 * Hyperlink stuff: Underline link regions if user has configured us so
+		 */
+		if (urlhack_underline) {
+			if (j == urlhack_toggle_x && i == urlhack_toggle_y) {
+				urlhack_is_link = urlhack_is_link == 1 ? 0 : 1;
+
+				// Find next bound for the toggle
+				
+				if (urlhack_is_link == 1) {
+					urlhack_toggle_x = urlhack_region.x1;
+					urlhack_toggle_y = urlhack_region.y1;
+
+					if (urlhack_toggle_x == term->cols - 1) {
+						// Handle special case where link ends at the last char of the row
+						urlhack_toggle_y++;
+						urlhack_toggle_x = 0;
+					}
+				}
+				else {
+					urlhack_region = urlhack_get_link_region(++urlhack_region_index);
+
+					if (urlhack_underline_always)
+						urlhack_hover_current = 1;
+					else
+						urlhack_hover_current = urlhack_is_in_this_link_region(urlhack_region, urlhack_mouse_old_x, urlhack_mouse_old_y);
+
+					urlhack_toggle_x = urlhack_region.x0;
+					urlhack_toggle_y = urlhack_region.y0;
+				}
+			}
+
+			if (urlhack_is_link == 1 && urlhack_hover_current == 1) {	
+				tattr |= ATTR_UNDER;
+			}
+
+			term->url_update = 0;
+		}
+		/* HACK: PuttyTray / Nutty : END */
+
 	    /* Video reversing things */
 	    if (term->selstate == DRAGGING || term->selstate == SELECTED) {
 		if (term->seltype == LEXICOGRAPHIC)
@@ -5390,6 +5490,11 @@ void term_scroll(Terminal *term, int rel, int where)
     int shift;
 #endif /* OPTIMISE_SCROLL */
 
+	/*
+	 * HACK: PuttyTray / Nutty
+	 */
+	term->url_update = TRUE;
+
     term->disptop = (rel < 0 ? 0 : rel > 0 ? sbtop : term->disptop) + where;
     if (term->disptop < sbtop)
 	term->disptop = sbtop;
@@ -5455,7 +5560,8 @@ static void clip_addchar(clip_workbuf *b, wchar_t chr, int attr)
     b->bufpos++;
 }
 
-static void clipme(Terminal *term, pos top, pos bottom, int rect, int desel)
+void clipme(Terminal *term, pos top, pos bottom, int rect, int desel,
+    void (*output)(Terminal *, void *, wchar_t *, int *, int, int))
 {
     clip_workbuf buf;
     int old_top_x;
@@ -5613,7 +5719,7 @@ static void clipme(Terminal *term, pos top, pos bottom, int rect, int desel)
     clip_addchar(&buf, 0, 0);
 #endif
     /* Finally, transfer all that to the clipboard. */
-    write_clip(term->frontend, buf.textbuf, buf.attrbuf, buf.bufpos, desel);
+    output(term, term->frontend, buf.textbuf, buf.attrbuf, buf.bufpos, desel);
     sfree(buf.textbuf);
     sfree(buf.attrbuf);
 }
@@ -5627,7 +5733,7 @@ void term_copyall(Terminal *term)
     top.x = 0;
     bottom.y = find_last_nonempty_line(term, screen);
     bottom.x = term->cols;
-    clipme(term, top, bottom, 0, TRUE);
+    clipme(term, top, bottom, 0, TRUE, write_clip);
 }
 
 /*
@@ -5950,6 +6056,13 @@ void term_do_paste(Terminal *term)
     queue_toplevel_callback(term_paste_callback, term);
 }
 
+void urlhack_launch_url_helper(Terminal *term, void *frontend, wchar_t * data, int *attr, int len, int must_deselect) {
+    urlhack_launch_url(!conf_get_int(term->conf, CONF_url_defbrowser)
+        ? conf_get_filename(term->conf, CONF_url_browser)->path
+        : NULL,
+        data);
+}
+
 void term_mouse(Terminal *term, Mouse_Button braw, Mouse_Button bcooked,
 		Mouse_Action a, int x, int y, int shift, int ctrl, int alt)
 {
@@ -5995,7 +6108,7 @@ void term_mouse(Terminal *term, Mouse_Button braw, Mouse_Button bcooked,
     }
 
     selpoint.x = x;
-    unlineptr(ldata);
+    //unlineptr(ldata); // HACK: REMOVED FOR HYPERLINK STUFF
 
     /*
      * If we're in the middle of a selection operation, we ignore raw
@@ -6046,8 +6159,10 @@ void term_mouse(Terminal *term, Mouse_Button braw, Mouse_Button bcooked,
                     return;
             } else switch (a) {
 	      case MA_DRAG:
-		if (term->xterm_mouse == 1)
-		    return;
+			if (term->xterm_mouse == 1) {// HACK: ADDED FOR hyperlink stuff
+				unlineptr(ldata); 
+				return;
+			}
 		encstate += 0x20;
 		break;
 	      case MA_RELEASE:
@@ -6057,8 +6172,12 @@ void term_mouse(Terminal *term, Mouse_Button braw, Mouse_Button bcooked,
 		term->mouse_is_down = 0;
 		break;
 	      case MA_CLICK:
-		if (term->mouse_is_down == braw)
-		    return;
+        // HACK: ADDED FOR hyperlink stuff
+        // MORE HACKING (@unphased: allow sequences of mouse wheel up and mouse wheel down to pass through)
+			  if (term->mouse_is_down == braw && braw != MBT_WHEEL_UP && braw != MBT_WHEEL_DOWN) {
+				  unlineptr(ldata); 
+				  return;
+			  }
 		term->mouse_is_down = braw;
 		break;
               default:
@@ -6081,6 +6200,7 @@ void term_mouse(Terminal *term, Mouse_Button braw, Mouse_Button bcooked,
 	    }
 	    ldisc_send(term->ldisc, abuf, len, 0);
 	}
+	unlineptr(ldata); // HACK: ADDED FOR hyperlink stuff
 	return;
     }
 
@@ -6103,6 +6223,31 @@ void term_mouse(Terminal *term, Mouse_Button braw, Mouse_Button bcooked,
 	term->seltype = default_seltype;
 	term->selanchor = selpoint;
 	term->selmode = SM_CHAR;
+
+	/*
+	 * HACK: PuttyTray / Nutty
+	 * Hyperlink stuff: Check whether the click coordinates are inside link
+	 * region, if so -> copy url to temporary buffer and launch it. Delete
+	 * the temporary buffer.
+	 */
+	} else if (bcooked == MBT_SELECT && a == MA_RELEASE && term->selstate == ABOUT_TO) {
+	deselect(term);
+	term->selstate = NO_SELECTION;
+
+
+	if ((!conf_get_int(term->conf, CONF_url_ctrl_click) || (conf_get_int(term->conf, CONF_url_ctrl_click) && urlhack_is_ctrl_pressed())) && urlhack_is_in_link_region(x, y)) {
+            wchar_t *linkbuf = NULL;
+            text_region region = urlhack_get_link_bounds(x, y);
+            pos top, bottom;
+            top.x = region.x0;
+            top.y = region.y0 + term->disptop;
+            bottom.x = region.x1;
+            bottom.y = region.y1 + term->disptop;
+            clipme(term, top, bottom, 0, 0, urlhack_launch_url_helper);
+	    sfree(linkbuf);
+	}
+	/* HACK: PuttyTray / Nutty : END */
+
     } else if (bcooked == MBT_SELECT && (a == MA_2CLK || a == MA_3CLK)) {
 	deselect(term);
 	term->selmode = (a == MA_2CLK ? SM_WORD : SM_LINE);
@@ -6113,8 +6258,10 @@ void term_mouse(Terminal *term, Mouse_Button braw, Mouse_Button bcooked,
 	sel_spread(term);
     } else if ((bcooked == MBT_SELECT && a == MA_DRAG) ||
 	       (bcooked == MBT_EXTEND && a != MA_RELEASE)) {
-	if (term->selstate == ABOUT_TO && poseq(term->selanchor, selpoint))
-	    return;
+	if (term->selstate == ABOUT_TO && poseq(term->selanchor, selpoint)) { // HACK: ADDED FOR HYPERLINK STUFF
+		unlineptr(ldata);
+		return;
+	}
 	if (bcooked == MBT_EXTEND && a != MA_DRAG &&
 	    term->selstate == SELECTED) {
 	    if (term->seltype == LEXICOGRAPHIC) {
@@ -6185,7 +6332,7 @@ void term_mouse(Terminal *term, Mouse_Button braw, Mouse_Button bcooked,
 	     * data to the clipboard.
 	     */
 	    clipme(term, term->selstart, term->selend,
-		   (term->seltype == RECTANGULAR), FALSE);
+		   (term->seltype == RECTANGULAR), FALSE, write_clip);
 	    term->selstate = SELECTED;
 	} else
 	    term->selstate = NO_SELECTION;
@@ -6253,6 +6400,51 @@ void term_nopaste(Terminal *term)
     term->paste_len = 0;
 }
 
+int term_paste_pending(Terminal *term)
+{
+    return term->paste_len != 0;
+}
+
+void term_paste(Terminal *term)
+{
+    long now, paste_diff;
+
+    if (term->paste_len == 0)
+	return;
+
+    /* Don't wait forever to paste */
+    if (term->paste_hold) {
+	now = GETTICKCOUNT();
+	paste_diff = now - term->last_paste;
+	if (paste_diff >= 0 && paste_diff < 450)
+	    return;
+    }
+    term->paste_hold = 0;
+
+    while (term->paste_pos < term->paste_len) {
+	int n = 0;
+	while (n + term->paste_pos < term->paste_len) {
+            if (term->paste_buffer[term->paste_pos + n++] == '\015') {
+                if (term->pastedelay > 0) {
+                    Sleep(term->pastedelay);
+		}
+                break;
+	    }
+        }
+	if (term->ldisc)
+	    luni_send(term->ldisc, term->paste_buffer + term->paste_pos, n, 0);
+	term->paste_pos += n;
+
+	if (term->paste_pos < term->paste_len) {
+	    term->paste_hold = 1;
+	    return;
+	}
+    }
+    sfree(term->paste_buffer);
+    term->paste_buffer = NULL;
+    term->paste_len = 0;
+}
+
 static void deselect(Terminal *term)
 {
     term->selstate = NO_SELECTION;
@@ -6297,6 +6489,11 @@ int term_data(Terminal *term, int is_stderr, const char *data, int len)
 	if (term->selstate != DRAGGING)
 	    term_out(term);
 	term->in_term_out = FALSE;
+
+	/*
+	 * HACK: PuttyTray / Nutty
+	 */
+	term->url_update = TRUE;
     }
 
     /*
