diff --git a/windows/winpgen.c b/windows/winpgen.c
index 9497ed60..2c1c27be 100644
--- a/windows/winpgen.c
+++ b/windows/winpgen.c
@@ -24,39 +24,11 @@
 #define DEFAULT_KEYSIZE 2048
 
 static char *cmdline_keyfile = NULL;
+static Filename *cmdline_keygen = NULL;
 
-/*
- * Print a modal (Really Bad) message box and perform a fatal exit.
- */
-void modalfatalbox(char *fmt, ...)
-{
-    va_list ap;
-    char *stuff;
-
-    va_start(ap, fmt);
-    stuff = dupvprintf(fmt, ap);
-    va_end(ap);
-    MessageBox(NULL, stuff, "PuTTYgen Fatal Error",
-	       MB_SYSTEMMODAL | MB_ICONERROR | MB_OK);
-    sfree(stuff);
-    exit(1);
-}
-
-/*
- * Print a non-fatal message box and do not exit.
- */
-void nonfatal(char *fmt, ...)
-{
-    va_list ap;
-    char *stuff;
-
-    va_start(ap, fmt);
-    stuff = dupvprintf(fmt, ap);
-    va_end(ap);
-    MessageBox(NULL, stuff, "PuTTYgen Error",
-	       MB_SYSTEMMODAL | MB_ICONERROR | MB_OK);
-    sfree(stuff);
-}
+#define PASSPHRASE_PROC_OK 1
+#define PASSPHRASE_PROC_CANCEL 2
+#define PASSPHRASE_PROC_CLOSE 0
 
 /* ----------------------------------------------------------------------
  * Progress report code. This is really horrible :-)
@@ -181,12 +153,12 @@ static int CALLBACK PassphraseProc(HWND hwnd, UINT msg,
 	switch (LOWORD(wParam)) {
 	  case IDOK:
 	    if (*passphrase)
-		EndDialog(hwnd, 1);
+                EndDialog(hwnd, PASSPHRASE_PROC_OK);
 	    else
 		MessageBeep(0);
 	    return 0;
 	  case IDCANCEL:
-	    EndDialog(hwnd, 0);
+	    EndDialog(hwnd, PASSPHRASE_PROC_CANCEL);
 	    return 0;
 	  case 102:		       /* edit box */
 	    if ((HIWORD(wParam) == EN_CHANGE) && passphrase) {
@@ -197,7 +169,7 @@ static int CALLBACK PassphraseProc(HWND hwnd, UINT msg,
 	}
 	return 0;
       case WM_CLOSE:
-	EndDialog(hwnd, 0);
+        EndDialog(hwnd, PASSPHRASE_PROC_CLOSE);
 	return 0;
     }
     return 0;
@@ -311,7 +283,7 @@ static int CALLBACK AboutProc(HWND hwnd, UINT msg,
 	    return 0;
 	  case 101:
 	    EnableWindow(hwnd, 0);
-	    DialogBox(hinst, MAKEINTRESOURCE(214), hwnd, LicenceProc);
+	    DialogBox(hinst, MAKEINTRESOURCE(814), hwnd, LicenceProc);
 	    EnableWindow(hwnd, 1);
 	    SetActiveWindow(hwnd);
 	    return 0;
@@ -397,30 +369,11 @@ static void setupbigedit1(HWND hwnd, int id, int idstatic, struct RSAKey *key)
 static void setupbigedit2(HWND hwnd, int id, int idstatic,
 			  struct ssh2_userkey *key)
 {
-    unsigned char *pub_blob;
-    char *buffer, *p;
-    int pub_len;
-    int i;
+    char *buffer = openssh_to_pubkey(key);
 
-    pub_blob = key->alg->public_blob(key->data, &pub_len);
-    buffer = snewn(strlen(key->alg->name) + 4 * ((pub_len + 2) / 3) +
-		   strlen(key->comment) + 3, char);
-    strcpy(buffer, key->alg->name);
-    p = buffer + strlen(buffer);
-    *p++ = ' ';
-    i = 0;
-    while (i < pub_len) {
-	int n = (pub_len - i < 3 ? pub_len - i : 3);
-	base64_encode_atom(pub_blob + i, n, p);
-	i += n;
-	p += 4;
-    }
-    *p++ = ' ';
-    strcpy(p, key->comment);
     SetDlgItemText(hwnd, id, buffer);
     SetDlgItemText(hwnd, idstatic, "&Public key for pasting into "
 		   "OpenSSH authorized_keys file:");
-    sfree(pub_blob);
     sfree(buffer);
 }
 
@@ -442,26 +395,6 @@ static int save_ssh1_pubkey(char *filename, struct RSAKey *key)
     return 1;
 }
 
-/*
- * Warn about the obsolescent key file format.
- */
-void old_keyfile_warning(void)
-{
-    static const char mbtitle[] = "PuTTY Key File Warning";
-    static const char message[] =
-	"You are loading an SSH-2 private key which has an\n"
-	"old version of the file format. This means your key\n"
-	"file is not fully tamperproof. Future versions of\n"
-	"PuTTY may stop supporting this private key format,\n"
-	"so we recommend you convert your key to the new\n"
-	"format.\n"
-	"\n"
-	"Once the key is loaded into PuTTYgen, you can perform\n"
-	"this conversion simply by saving it again.";
-
-    MessageBox(NULL, message, mbtitle, MB_OK);
-}
-
 static int save_ssh2_pubkey(char *filename, struct ssh2_userkey *key)
 {
     unsigned char *pub_blob;
@@ -686,10 +619,10 @@ void load_key_file(HWND hwnd, struct MainDlgState *state,
             pps.passphrase = &passphrase;
             pps.comment = comment;
 	    dlgret = DialogBoxParam(hinst,
-				    MAKEINTRESOURCE(210),
+				    MAKEINTRESOURCE(810),
 				    NULL, PassphraseProc,
 				    (LPARAM) &pps);
-	    if (!dlgret) {
+            if (dlgret != PASSPHRASE_PROC_OK) {
 		ret = -2;
 		break;
 	    }
@@ -836,7 +769,7 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
              */
         }
 	SendMessage(hwnd, WM_SETICON, (WPARAM) ICON_BIG,
-		    (LPARAM) LoadIcon(hinst, MAKEINTRESOURCE(200)));
+		    (LPARAM) LoadIcon(hinst, MAKEINTRESOURCE(800)));
 
 	state = snew(struct MainDlgState);
 	state->generation_thread_exists = FALSE;
@@ -905,7 +838,7 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
 	{
 	    struct ctlpos cp, cp2;
 
-	    /* Accelerators used: acglops1rbd */
+	    /* Accelerators used: acglops1rbde */
 
 	    ctlposinit(&cp, hwnd, 4, 4, 4);
 	    beginbox(&cp, "Key", IDC_BOX_KEY);
@@ -939,7 +872,7 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
 		       "&Save private key", IDC_SAVE);
 	    endbox(&cp);
 	    beginbox(&cp, "Parameters", IDC_BOX_PARAMS);
-	    radioline(&cp, "Type of key to generate:", IDC_TYPESTATIC, 3,
+	    radioline(&cp, "Type of key to generate:", IDC_TYPESTATIC, 4,
 		      "SSH-&1 (RSA)", IDC_KEYSSH1,
 		      "SSH-2 &RSA", IDC_KEYSSH2RSA,
 		      "SSH-2 &DSA", IDC_KEYSSH2DSA, NULL);
@@ -960,10 +893,12 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
 	 */
 	ui_set_state(hwnd, state, 0);
 
+        if (cmdline_keygen) {
+            PostMessage(hwnd, WM_COMMAND, IDC_GENERATE, 0);
 	/*
 	 * Load a key file if one was provided on the command line.
 	 */
-	if (cmdline_keyfile) {
+	} else if (cmdline_keyfile) {
             Filename *fn = filename_from_str(cmdline_keyfile);
 	    load_key_file(hwnd, state, fn, 0);
             filename_free(fn);
@@ -1056,7 +991,7 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
 	    break;
 	  case IDC_ABOUT:
 	    EnableWindow(hwnd, 0);
-	    DialogBox(hinst, MAKEINTRESOURCE(213), hwnd, AboutProc);
+	    DialogBox(hinst, MAKEINTRESOURCE(813), hwnd, AboutProc);
 	    EnableWindow(hwnd, 1);
 	    SetActiveWindow(hwnd);
 	    return 0;
@@ -1133,6 +1068,19 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
 		char *passphrase, *passphrase2;
                 int type, realtype;
 
+                if (cmdline_keygen) {
+                    char *dir;
+                    strcpy(filename, filename_to_str(cmdline_keygen));
+                    dir = _strdup(filename);
+                    *strrchr(dir, '\\') = 0;
+                    if (ERROR_ALREADY_EXISTS != CreateDirectory(dir, NULL)) {
+                        EncryptFile(dir);
+                    }
+                    free(dir);
+                }
+                else
+                    filename[0] = '\0';
+
                 if (state->ssh2)
                     realtype = SSH_KEYTYPE_SSH2;
                 else
@@ -1156,8 +1104,37 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
 		    break;
                 }
 
-		passphrase = GetDlgItemText_alloc(hwnd, IDC_PASSPHRASE1EDIT);
-		passphrase2 = GetDlgItemText_alloc(hwnd, IDC_PASSPHRASE2EDIT);
+                if (cmdline_keygen) {
+	            int dlgret;
+                    struct PassphraseProcStruct pps;
+                    passphrase = snewn(1000, char);
+                    passphrase[0] = 0;
+                    passphrase2 = snewn(1000, char);
+                    passphrase2[0] = 0;
+                    pps.passphrase = &passphrase;
+                    pps.comment = "or cancel for no passphrase";
+	            dlgret = DialogBoxParam(hinst,
+				            MAKEINTRESOURCE(810),
+				            hwnd, PassphraseProc,
+				            (LPARAM) &pps);
+                    if (dlgret != PASSPHRASE_PROC_CANCEL) {
+                        while (strcmp(passphrase, passphrase2)) {
+                            pps.passphrase = &passphrase2;
+                            pps.comment = "again to confirm";
+                            dlgret = DialogBoxParam(hinst,
+				                    MAKEINTRESOURCE(810),
+				                    hwnd, PassphraseProc,
+				                    (LPARAM) &pps);
+                            if (dlgret != PASSPHRASE_PROC_OK) {
+                                PostQuitMessage(3);
+                                return 0;
+                            }
+                        }
+                    }
+                } else {
+		    passphrase = GetDlgItemText_alloc(hwnd, IDC_PASSPHRASE1EDIT);
+		    passphrase2 = GetDlgItemText_alloc(hwnd, IDC_PASSPHRASE2EDIT);
+                }
 		if (strcmp(passphrase, passphrase2)) {
 		    MessageBox(hwnd,
 			       "The two passphrases given do not match.",
@@ -1167,7 +1144,7 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
 		    break;
 		}
                 burnstr(passphrase2);
-		if (!*passphrase) {
+                if (!cmdline_keygen && !*passphrase) {
 		    int ret;
 		    ret = MessageBox(hwnd,
 				     "Are you sure you want to save this key\n"
@@ -1179,7 +1156,7 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
                         break;
                     }
 		}
-		if (prompt_keyfile(hwnd, "Save private key as:",
+		if (*filename || prompt_keyfile(hwnd, "Save private key as:",
 				   filename, 1, (type == realtype))) {
 		    int ret;
 		    FILE *fp = fopen(filename, "r");
@@ -1193,6 +1170,8 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
 			sfree(buffer);
 			if (ret != IDYES) {
                             burnstr(passphrase);
+                            if (cmdline_keygen)
+                                PostQuitMessage(2);
 			    break;
                         }
 		    }
@@ -1220,7 +1199,11 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
 		    if (ret <= 0) {
 			MessageBox(hwnd, "Unable to save key file",
 				   "PuTTYgen Error", MB_OK | MB_ICONERROR);
-		    }
+                        if (cmdline_keygen)
+                            PostQuitMessage(1);
+		    } else
+                        if (cmdline_keygen)
+                            PostQuitMessage(0);
 		}
                 burnstr(passphrase);
 	    }
@@ -1361,6 +1344,9 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
 	 * Finally, hide the progress bar and show the key data.
 	 */
 	ui_set_state(hwnd, state, 2);
+        if (cmdline_keygen) {
+            PostMessage(hwnd, WM_COMMAND, IDC_EXPORT_OPENSSH, 0);
+        }
 	break;
       case WM_HELP:
         {
@@ -1424,13 +1410,7 @@ static int CALLBACK MainDlgProc(HWND hwnd, UINT msg,
     return 0;
 }
 
-void cleanup_exit(int code)
-{
-    shutdown_help();
-    exit(code);
-}
-
-int WINAPI WinMain(HINSTANCE inst, HINSTANCE prev, LPSTR cmdline, int show)
+int puttygen_main(HINSTANCE inst, HINSTANCE prev, LPSTR cmdline, int show)
 {
     int argc;
     char **argv;
@@ -1452,16 +1432,20 @@ int WINAPI WinMain(HINSTANCE inst, HINSTANCE prev, LPSTR cmdline, int show)
 	    pgp_fingerprints();
 	    exit(1);
 	} else {
-	    /*
-	     * Assume the first argument to be a private key file, and
-	     * attempt to load it.
-	     */
-	    cmdline_keyfile = argv[0];
+            if (!strcmp("--ssh-keygen", argv[0])) {
+                cmdline_keygen = get_id_rsa_path();
+            } else {
+                /*
+	         * Assume the first argument to be a private key file, and
+	         * attempt to load it.
+	         */
+	        cmdline_keyfile = argv[0];
+            }
 	}
     }
 
     random_ref();
-    ret = DialogBox(hinst, MAKEINTRESOURCE(201), NULL, MainDlgProc) != IDOK;
+    ret = DialogBox(hinst, MAKEINTRESOURCE(801), NULL, MainDlgProc) != IDOK;
 
     cleanup_exit(ret);
     return ret;			       /* just in case optimiser complains */
