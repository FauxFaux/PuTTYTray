diff --git a/windows/wincfg.c b/windows/wincfg.c
index 9d3673a6..39306280 100644
--- a/windows/wincfg.c
+++ b/windows/wincfg.c
@@ -9,6 +9,14 @@
 #include "putty.h"
 #include "dialog.h"
 #include "storage.h"
+#include "urlhack.h"
+
+int dlg_pick_icon(void *dlg, char **iname, int inamesize, DWORD *iindex);
+
+enum {
+    CHILD_KEYGEN,
+    CHILD_AGENT,
+};
 
 static void about_handler(union control *ctrl, void *dlg,
 			  void *data, int event)
@@ -20,6 +28,33 @@ static void about_handler(union control *ctrl, void *dlg,
     }
 }
 
+static void child_launch_handler(union control *ctrl, void *dlg,
+			         void *data, int event)
+{
+    char *arg;
+    char us[MAX_PATH + 16];
+    int child = ctrl->generic.context.i;
+
+    if (event != EVENT_ACTION)
+        return;
+
+    switch (child) {
+    case CHILD_AGENT:
+        arg = "--as-agent";
+        break;
+    case CHILD_KEYGEN:
+        arg = "--as-gen";
+        break;
+    default:
+        assert(!"No other enum values");
+    }
+
+    if (!GetModuleFileName(NULL, us, MAX_PATH))
+        return;
+
+    ShellExecute(hwnd, NULL, us, arg, "", SW_SHOW);
+}
+
 static void help_handler(union control *ctrl, void *dlg,
 			 void *data, int event)
 {
@@ -40,26 +75,79 @@ static void variable_pitch_handler(union control *ctrl, void *dlg,
     }
 }
 
+static void window_icon_handler(union control *ctrl, void *dlg, void *data, int event)
+{
+    Conf *conf = (Conf *) data;
+
+    if (event == EVENT_ACTION) {
+	char buf[512], iname[512], *ipointer;
+	DWORD iindex;
+
+	memset(&iname, 0, sizeof(iname));
+	memset(&buf, 0, sizeof(buf));
+	iindex = 0;
+	ipointer = iname;
+	if (dlg_pick_icon(dlg, &ipointer, sizeof(iname), &iindex) /*&& iname[0]*/) {
+            Filename *filename;
+	    if (iname[0]) {
+		sprintf(buf, "%s,%lu", iname, iindex);
+	    } else {
+		sprintf(buf, "%s", iname);
+	    }
+	    dlg_icon_set((union control *) ctrl->button.context.p, dlg, buf);
+            filename = filename_from_str(buf);
+            conf_set_filename(conf, CONF_win_icon, filename);
+            filename_free(filename);
+	}
+    }
+}
+
 void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
 			  int midsession, int protocol)
 {
     struct controlset *s;
     union control *c;
     char *str;
+    int col = 0;
+    int cancelColumn;
 
-    if (!midsession) {
-	/*
-	 * Add the About and Help buttons to the standard panel.
-	 */
-	s = ctrl_getset(b, "", "", "");
-	c = ctrl_pushbutton(s, "About", 'a', HELPCTX(no_help),
-			    about_handler, P(hwndp));
-	c->generic.column = 0;
-	if (has_help) {
-	    c = ctrl_pushbutton(s, "Help", 'h', HELPCTX(no_help),
-				help_handler, P(hwndp));
-	    c->generic.column = 1;
-	}
+    /*
+     * Add the About and Help buttons to the standard panel.
+     * There isn't space for all four, so drop
+     *  the about button if it can't fit.
+     */
+    s = ctrl_getset(b, "", "", "");
+
+    // if there's help, we free up the cancel button's space,
+    // and put "about" there instead.  There's plenty of sensible
+    // ways to cancel the dialog already
+    if (has_help) {
+        int cancelLocation = s->ncontrols - 1;
+        assert('C' == s->ctrls[cancelLocation]->button.label[0]);
+        sfree(s->ctrls[cancelLocation]);
+        --s->ncontrols;
+
+        cancelColumn = 4;
+    } else {
+        cancelColumn = col++;
+    }
+
+    c = ctrl_pushbutton(s, "About", NO_SHORTCUT, HELPCTX(no_help),
+		about_handler, P(hwndp));
+    c->generic.column = cancelColumn;
+
+    c = ctrl_pushbutton(s, "Keygen", NO_SHORTCUT, HELPCTX(no_help),
+                        child_launch_handler, I(CHILD_KEYGEN));
+    c->generic.column = col++;
+
+    c = ctrl_pushbutton(s, "Agent", NO_SHORTCUT, HELPCTX(no_help),
+			child_launch_handler, I(CHILD_AGENT));
+    c->generic.column = col++;
+
+    if (has_help) {
+	c = ctrl_pushbutton(s, "Help", 'h', HELPCTX(no_help),
+			    help_handler, P(hwndp));
+	c->generic.column = col++;
     }
 
     /*
@@ -109,6 +197,12 @@ void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
     ctrl_checkbox(s, "Control-Alt is different from AltGr", 'd',
 		  HELPCTX(keyboard_ctrlalt),
 		  conf_checkbox_handler, I(CONF_ctrlaltkeys));
+    ctrl_checkbox(s, "Right-Alt acts as it is", 'l',
+		  HELPCTX(no_help),
+		  conf_checkbox_handler, I(CONF_rightaltkey));
+    ctrl_checkbox(s, "Set meta bit on alt (instead of escape)", 'm',
+		  HELPCTX(no_help),
+		  conf_checkbox_handler, I(CONF_alt_metabit));
 
     /*
      * Windows allows an arbitrary .WAV to be played as a bell, and
@@ -266,15 +360,6 @@ void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
     }
 
     /*
-     * RTF paste is Windows-specific.
-     */
-    s = ctrl_getset(b, "Window/Selection", "format",
-		    "Formatting of pasted characters");
-    ctrl_checkbox(s, "Paste to clipboard in RTF as well as plain text", 'f',
-		  HELPCTX(selection_rtf),
-		  conf_checkbox_handler, I(CONF_rtf_paste));
-
-    /*
      * Windows often has no middle button, so we supply a selection
      * mode in which the more critical Paste action is available on
      * the right button instead.
@@ -285,9 +370,10 @@ void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
 		      HELPCTX(selection_buttons),
 		      conf_radiobutton_handler,
 		      I(CONF_mouse_is_xterm),
+		      "Default (Middle pastes, Right brings up menu)", I(3),
 		      "Windows (Middle extends, Right brings up menu)", I(2),
 		      "Compromise (Middle extends, Right pastes)", I(0),
-		      "xterm (Right extends, Middle pastes)", I(1), NULL);
+		      "xterm (Middle pastes, Right extends)", I(1), NULL);
     /*
      * This really ought to go at the _top_ of its box, not the
      * bottom, so we'll just do some shuffling now we've set it
@@ -297,6 +383,15 @@ void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
     memmove(s->ctrls+1, s->ctrls, (s->ncontrols-1)*sizeof(union control *));
     s->ctrls[0] = c;
 
+    ctrl_checkbox(s, "Paste to clipboard in RTF as well as plain text", 'f',
+		HELPCTX(selection_rtf),
+		conf_checkbox_handler, I(CONF_rtf_paste));
+
+    ctrl_editbox(s, "Paste Delay per Line (ms)", '9', 20,
+	    HELPCTX(window_pastedelay),
+	    conf_editbox_handler,
+	    I(CONF_pastedelay), I(-1));
+
     /*
      * Logical palettes don't even make sense anywhere except Windows.
      */
@@ -308,7 +403,9 @@ void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
     ctrl_checkbox(s, "Use system colours", 's',
                   HELPCTX(colours_system),
                   conf_checkbox_handler, I(CONF_system_colour));
-
+    ctrl_editbox(s, "Window opacity (50-255)", 't', 30,
+                  HELPCTX(no_help),
+                  conf_editbox_handler, I(CONF_transparency), I(-1));
 
     /*
      * Resize-by-changing-font is a Windows insanity.
@@ -319,6 +416,7 @@ void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
 		      conf_radiobutton_handler,
 		      I(CONF_resize_action),
 		      "Change the number of rows and columns", I(RESIZE_TERM),
+		      "Change rows and columns only when maximised", I(RESIZE_MAXTERM),
 		      "Change the size of the font", I(RESIZE_FONT),
 		      "Change font size only when maximised", I(RESIZE_EITHER),
 		      "Forbid resizing completely", I(RESIZE_DISABLED), NULL);
@@ -332,7 +430,7 @@ void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
     ctrl_checkbox(s, "Window closes on ALT-F4", '4',
 		  HELPCTX(behaviour_altf4),
 		  conf_checkbox_handler, I(CONF_alt_f4));
-    ctrl_checkbox(s, "System menu appears on ALT-Space", 'y',
+    ctrl_checkbox(s, "System menu appears on ALT-Space", 'm',
 		  HELPCTX(behaviour_altspace),
 		  conf_checkbox_handler, I(CONF_alt_space));
     ctrl_checkbox(s, "System menu appears on ALT alone", 'l',
@@ -346,6 +444,82 @@ void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
 		  conf_checkbox_handler,
 		  I(CONF_fullscreenonaltenter));
 
+    s = ctrl_getset(b, "Connection", "reconnect", "Reconnect options (UNSUPPORTED)");
+    ctrl_checkbox(s, "Attempt to reconnect on connection failure", 'f', HELPCTX(no_help), conf_checkbox_handler, I(CONF_failure_reconnect));
+    ctrl_checkbox(s, "Attempt to reconnect on system wakeup", 'w', HELPCTX(no_help), conf_checkbox_handler, I(CONF_wakeup_reconnect));
+
+    s = ctrl_getset(b, "Window/Behaviour", "icon", "Adjust the icon");
+    ctrl_columns(s, 3, 40, 20, 40);
+    c = ctrl_text(s, "Window / tray icon:", HELPCTX(appearance_title));
+    c->generic.column = 0;
+    c = ctrl_icon(s, HELPCTX(appearance_title),
+		  I(CONF_win_icon));
+    c->generic.column = 1;
+    c = ctrl_pushbutton(s, "Change Icon...", NO_SHORTCUT, HELPCTX(appearance_title),
+			window_icon_handler, P(c));
+    c->generic.column = 2;
+    ctrl_columns(s, 1, 100);
+
+    ctrl_radiobuttons(s, "Show tray icon:", NO_SHORTCUT, 4,
+                      HELPCTX(no_help),
+                      conf_radiobutton_handler,
+                      I(CONF_tray),
+                      "Normal", 'n', I(TRAY_NORMAL),
+                      "Always", 'y', I(TRAY_ALWAYS),
+                      "Never", 'r', I(TRAY_NEVER),
+                      "On start", 's', I(TRAY_START), NULL);
+
+    ctrl_checkbox(s, "Accept single-click to restore from tray", NO_SHORTCUT,
+		  HELPCTX(no_help),
+		  conf_checkbox_handler, I(CONF_tray_restore));
+
+	/*
+	 * HACK: PuttyTray / Nutty
+	 * Hyperlink stuff: The Window/Hyperlinks panel.
+	 */
+	ctrl_settitle(b, "Window/Hyperlinks", "Options controlling behaviour of hyperlinks");
+	s = ctrl_getset(b, "Window/Hyperlinks", "general", "General options for hyperlinks");
+
+	ctrl_radiobuttons(s, "Underline hyperlinks:", NO_SHORTCUT, 1,
+			  HELPCTX(no_help),
+			  conf_radiobutton_handler,
+			  I(CONF_url_underline),
+			  "Always", NO_SHORTCUT, I(URLHACK_UNDERLINE_ALWAYS),
+			  "When hovered upon", NO_SHORTCUT, I(URLHACK_UNDERLINE_HOVER),
+			  "Never", NO_SHORTCUT, I(URLHACK_UNDERLINE_NEVER),
+			  NULL);
+
+	ctrl_checkbox(s, "Use ctrl+click to launch hyperlinks", 'l',
+		  HELPCTX(no_help),
+		  conf_checkbox_handler, I(CONF_url_ctrl_click));
+
+	s = ctrl_getset(b, "Window/Hyperlinks", "browser", "Browser application");
+
+	ctrl_checkbox(s, "Use the default browser", 'b',
+		  HELPCTX(no_help),
+		  conf_checkbox_handler, I(CONF_url_defbrowser));
+
+	ctrl_filesel(s, "or specify an application to open hyperlinks with:", 's',
+		"Application (*.exe)\0*.exe\0All files (*.*)\0*.*\0\0", TRUE,
+		"Select executable to open hyperlinks with", HELPCTX(no_help),
+		 conf_filesel_handler, I(CONF_url_browser));
+
+	s = ctrl_getset(b, "Window/Hyperlinks", "regexp", "Regular expression");
+
+	ctrl_radiobuttons(s, "URL selection:", NO_SHORTCUT, 1,
+		    HELPCTX(no_help),
+		    conf_radiobutton_handler,
+                    I(CONF_url_defregex),
+		    "Select sensible URLs", NO_SHORTCUT, I(URLHACK_REGEX_CLASSIC),
+		    "Select nearly any URL", NO_SHORTCUT, I(URLHACK_REGEX_LIBERAL),
+		    "Custom", NO_SHORTCUT, I(URLHACK_REGEX_CUSTOM),
+		    NULL);
+
+	ctrl_editbox(s, "Customise regex:", NO_SHORTCUT, 100,
+		 HELPCTX(no_help),
+		 conf_editbox_handler, I(CONF_url_regex),
+		 I(1));
+
     /*
      * Windows supports a local-command proxy. This also means we
      * must adjust the text on the `Telnet command' control.
@@ -390,6 +564,12 @@ void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
         ser_setup_config_box(b, midsession, 0x1F, 0x0F);
 
     /*
+     * cygterm back end is available on Windows.
+     */
+    if (!midsession || (protocol == PROT_CYGTERM))
+        cygterm_setup_config_box(b, midsession);
+
+    /*
      * $XAUTHORITY is not reliable on Windows, so we provide a
      * means to override it.
      */
@@ -400,4 +580,5 @@ void win_setup_config_box(struct controlbox *b, HWND *hwndp, int has_help,
 		     HELPCTX(ssh_tunnels_xauthority),
 		     conf_filesel_handler, I(CONF_xauthfile));
     }
+
 }
